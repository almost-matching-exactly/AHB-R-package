% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AHB_fast_match.R
\name{AHB_fast_match}
\alias{AHB_fast_match}
\title{A Fast Approximate Implementation of AHB Matching}
\usage{
AHB_fast_match(
  data,
  holdout = 0.1,
  treated_column_name = "treated",
  outcome_column_name = "outcome",
  PE_method = "BART",
  user_PE_fit = NULL,
  user_PE_fit_params = NULL,
  user_PE_predict = NULL,
  user_PE_predict_params = NULL,
  cv = F,
  C = 1.1,
  n_prune = ifelse(is.numeric(holdout), round(0.1 * (1 - holdout) * nrow(data)),
    round(0.1 * nrow(data))),
  missing_data = "none",
  missing_holdout = "none",
  impute_with_treatment = TRUE,
  impute_with_outcome = FALSE
)
}
\arguments{
\item{data}{Either a data frame or a path to a .csv file to be read. If
holdout is not a numeric value, this is the data to be matched. If holdout
is a numeric scalar between 0 and 1, that proportion of data will be made
into a holdout set and only the remaining proportion of data will be
matched. Covariates can either be categorical, continuous or mixed
(categorical and continuous). Outcome must be either binary or continuous
(both numeric) with name \code{outcome_column_name} . Treatment must be
described by a logical or binary column with name
\code{treated_column_name}.}

\item{holdout}{A data frame, a path to a .csv file to be read or a numeric
scalar between 0 and 1 .  If a numeric scalar, that proportion of data will be
made into a holdout set and only the remaining proportion of data will be
matched. Otherwise, a dataframe or a path to a .csv file. Must have the same
column names and order as data. This data will not be matched. Covariates
can either be categorical, continuous or mixed (categorical and
continuous).Outcome must be either binary or continuous (both numeric) with
name \code{outcome_column_name} . Treatment must be described by a logical
or binary column with name \code{treated_column_name}.}

\item{treated_column_name}{A character with the name of the treatment column
in data and holdout. Defaults to 'treated'.}

\item{outcome_column_name}{A character with the name of the outcome column in
holdout and also in data, if supplied in the latter. Defaults to 'outcome'.}

\item{PE_method}{Denotes the method to be used to generate outcome model Y.
If "BART", use bart in dbarts as ML model to do prediction.
If "xgb, use xgboost as ML model to do prediction.
 Defaults to "BART".}

\item{user_PE_fit}{An optional function supplied by the user that can be used
instead of those allowed for by \code{PE_method} to fit a model for the
outcome from the covariates. Must take in a matrix of covariates as its
first argument and a vector outcome as its second argument. Defaults to
\code{NULL}.}

\item{user_PE_fit_params}{A named list of optional parameters to be used by
\code{user_PE_fit}. Defaults to \code{NULL}.}

\item{user_PE_predict}{An optional function supplied by the user that can be
 used to generate predictions from the output of \code{user_PE_fit}. As its
 first argument, must take an object of the type returned by
\code{user_PE_fit} and as its second, a matrix of values for which to
generate predictions. When the outcome is binary or multi-class, must
return the maximum probability class label. If not supplied,
defaults to \code{predict}.}

\item{user_PE_predict_params}{A named list of optional parameters to be used
by \code{user_PE_predict}. Defaults to \code{NULL}.}

\item{cv}{A logical scalar. If \code{TURE}, do cross-validation on the train
set to generate outcome model Y . Defaults to \code{TRUE}.}

\item{C}{A positive scalar. Determines the stopping condition for Fast AHB.
When the variance in a newly expanded region exceeds C times the variance in
the previous expansion region, the algorithm stops. Thus, higher C
encourages coarser bins while lower C encourages finer ones. The user should
analyze the data with multiple values of C to see how robust results are to
its choice.}

\item{n_prune}{A numeric value, the number of candidate units selected to run
the mip on for constructing the box. Dataset mentioned below is refered to
the dataset for matching. If you match a small dataset with the number of
units smaller than 400, it will run MIP on all dataset for each treated
unit. If you match larger dataset and your memory of your computer cannot
support such much computation, plase adjust n_prune below 400 or even
smaller. The smaller number of candidate units selected to run the mip on
for constructing the box, the faster this program runs.Defualt n_prune =
0.1* nrow(dataset).}

\item{missing_data}{Specifies how to handle missingness in \code{data}. If
'none' (default), assumes no missing data; if 'drop', effectively drops
units with missingness from the data and does not match them;
if 'impute', imputes the missing data via \code{mice::mice}.}

\item{missing_holdout}{Specifies how to handle missingness in \code{holdout}.
If 'none' (default), assumes no missing data; if 'drop', effectively drops
units with missingness and does not use them to compute PE; and if 'impute',
imputes the missing data via \code{mice::mice}. In this last case, the PE
at an iteration will be given by the average PE across all imputations.}

\item{impute_with_treatment}{A logical scalar. If \code{TRUE}, uses treatment
assignment to impute covariates when \code{missing_data = 'impute'} or
\code{missing_holdout = 'impute'}. Defaults to \code{TRUE}.}

\item{impute_with_outcome}{A logical scalar. If \code{TRUE}, uses outcome
information to impute covariates when \code{missing_data = 'impute'} or
\code{missing_holdout = 'impute'}. Defaults to \code{FALSE}.}
}
\value{
The basic object returned by \code{AHB_MIP_match} is a list of 5
 entries: \describe{\item{data}{Clean data set after preprocessing was matched by \code{AHB_MIP_match}.
 If holdout is not a numeric value, the \code{AHB_MIP_out$data} is the same
 as the data input into \code{AHB_MIP_match}.  If holdout is a numeric scalar
 between 0 and 1, \code{AHB_MIP_out$data} is the remaining proportion of data
 that were matched.}
 \item{data_dummy}{This is dummy version of \code{data}. AHB will convert all categorical data into dummies}
  \item{units_id}{A integer vector with unit_id for test
 treated units} \item{CATE}{A numeric vector with the conditional average
 treatment effect estimates for every test treated unit in its matched group
 in \code{MGs}} \item{bins}{ An array of two lists where the first one
 contains lower bounds and the other contains upper bounds for each test
 treated unit. Each row of each list is a vector corresponding to a test
 treated unit.} \item{MGs}{A list of all the matched groups formed by
 AHB_fast_match. For each test treated unit, each row contains all unit_id of
 the other units that fall into its box, including itself. } }
 \item{list_dummyCols}{This is a list of dummy cols after mapping}
 \item{verbose}{This is used for postprocessing. Contains \code{treated_column_name} and \code{outcome_column_name}}
}
\description{
\code{AHB_fast_match} runs a (fast) approximate implementation of AHB Matching
}
\section{Introduction}{
 \code{AHB_fast_match} is a matching algorithm that
 matches units with others in unit-specific, hyper-box-shaped regions of the
 covariate space.These regions are large enough that many matches are created
 for each unit and small enough that the treatment effect is roughly constant
 throughout. The regions are found as the solution to using a (fast)
 approximation algorithm. For more details, please see the AHB paper
 \href{https://arxiv.org/pdf/2003.01805.pdf}{here}.
}

