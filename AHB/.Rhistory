if (p==4){
colnames(df)<- c("salary", "payment on books", "gender", "the number of children",
"outcome", "treated")
}
return(data = df)
}
df<-gen_mixedData()
AHB_out <- AHB_fast_match(df,df)
print_box(AHB_out,5)
df<-gen_mixedData(p=50)
AHB_out <- AHB_fast_match(df,df)
df<-gen_mixedData(n_units = 500,p=50)
AHB_out <- AHB_fast_match(df,df)
AHB_out <- AHB_MIP_match(df,df)
df<-gen_mixedData(n_units = 500,p=10)
AHB_out <- AHB_MIP_match(df,df)
AHB_out <- AHB_fast_match(df,df)
df<-gen_mixedData(n_units = 100,p=10)
AHB_out <- AHB_fast_match(df,df)
print_box(AHB_out,5)
df<-gen_mixedData(n_units = 100,p=20)
AHB_out <- AHB_fast_match(df,df)
print_box(AHB_out,5)
print_box(AHB_out,4)
print_box(AHB_out,1)
library(AHB)
df<-gen_mixedData(n_units = 100,p=10)
gen_mixedData<-function(n_units=100, p = 4){
beta0 <- 2 # Baseline response
beta_tilde <- 5 # treatment effect
p_numeric <- p/2
p_categorical <- p - p_numeric
beta <- runif(p, -1, 1) # To go from X_numeric to propensity score
## For generating propensity scores and assigning treatment
X_numeric <- matrix(runif(p_numeric * n_units, -5, 5), nrow = n_units)
X_categorical <- matrix(rbinom(p_categorical * n_units, 1, 0.5), ncol = p_categorical, nrow = n_units)
X_categorical[,1]<-"male"
X_categorical[c(1,2,3,4,5,6,7,8),1] <-"female"
X_categorical[,2]<-"1"
X_categorical[c(1,2,3,4,5,6,7,8),2] <-"2"
X_categorical[c(9:15),2] <-"3"
## Generate outcome
eps <- rnorm(n_units, 0, 1)
Z <- rbinom(n_units, 1, 0.5)
X_numeric[, 1] <-  matrix(runif(n_units, 1000, 10000), nrow = n_units)
X_numeric[, 2] <- matrix(runif(n_units, 0, 1000), nrow = n_units)
Y1 <- beta0 + (X_numeric[, 1] > 1.5) * beta_tilde + eps
Y0 <- beta0  + eps
Y = Y1 * Z + Y0 * (1-Z)
df <- cbind(data.frame(X_numeric),data.frame(X_categorical))
colnames(df)<-NULL
df <- cbind(df,data.frame(outcome = Y, treated = Z))
if (p==4){
colnames(df)<- c("salary", "payment on books", "gender", "the number of children",
"outcome", "treated")
}
return(data = df)
}
df<-gen_mixedData(n_units = 100,p=10)
print_box(AHB_out,1)
AHB_out <- AHB_fast_match(df,df)
print_box(AHB_out,1)
print_box(AHB_out,2)
print_box(AHB_out,3)
print_box(AHB_out,4)
print_box(AHB_out,5)
print_box(AHB_out,6)
devtools::document()
usethis::use_rcpp()
library(AHB)
print_box(AHB_out,3)
print_box(AHB_out,1)
print_box(AHB_out,5)
print_box(AHB_out,6)
print_box<-function(AHB_out, treated_unit_id){
treated_unit_ids <-AHB_out$treated_unit_ids
if(!(treated_unit_id %in% treated_unit_ids)){
stop("Please input a valid treated unit id.\n")
}
infoList = list ()
cat(paste0("Unit ",treated_unit_id, " matches to units with: " ,"\n"))
data <- AHB_out$data
bins <- AHB_out$bins
data_dummy <- AHB_out$data_dummy
list_dummyCols <- AHB_out$list_dummyCols
treated_column_name <- AHB_out$verbose[[1]]
outcome_column_name <- AHB_out$verbose[[2]]
lowerBound <- bins[which(treated_unit_ids == treated_unit_id), ,1]
higherBound<-bins[which(treated_unit_ids == treated_unit_id), ,2]
unit_dummy <-  data_dummy[treated_unit_id,]
count <- 1
colNames <- colnames(data)
for(cov in colNames){
if(cov == treated_column_name ||cov == outcome_column_name) next
if(is.factor(data[, cov])){
info <- mapCategoricalBoundsToOriginal(lowerBound,higherBound,cov,list_dummyCols[[count]],unit_dummy)
infoList<- append(infoList,info)
count = count + 1
}
else{
lower = lowerBound[which(colnames(unit_dummy) == cov)]
higher = higherBound[which(colnames(unit_dummy) == cov)]
info <- printOneLineNumeric(cov,lower,higher);
infoList<- append(infoList,info)
}
}
return (infoList)
}
print_box(AHB_out,6)
mapCategoricalBoundsToOriginal<-function(lb,hb,colName,colsDummy,unit_dummy){
container <- c()
for(col in colsDummy){
index <- which(colnames(unit_dummy) == paste0(colName,"_",col))
if(unit_dummy[index] >= lb[index] && unit_dummy[index] <= hb[index]){
container<-append(container, col)
}
}
info <- printOneLineForFactor(colName, container)
return (info)
}
printOneLineForFactor <- function(colName, container){
info = paste(colName, "in {")
delimit = ""
i <- 1
for(c in container){
info = paste(info , c)
if(i != length(container)){
info = paste(info , ",")
}
i = i +1
}
info = paste(info , "}", "\n")
cat(info)
return (info)
}
printOneLineNumeric <- function(colName, lower,higher){
info = paste(colName, "from ")
info = paste(info, sprintf("%.3f", lower), "to", sprintf("%.3f", higher), "\n")
cat(info)
return(info)
}
print_box(AHB_out,6)
print_box<-function(AHB_out, treated_unit_id){
treated_unit_ids <-AHB_out$treated_unit_ids
if(!(treated_unit_id %in% treated_unit_ids)){
stop("Please input a valid treated unit id.\n")
}
infoList = list ()
cat(paste0("Unit ",treated_unit_id, " matches to units with: " ,"\n"))
data <- AHB_out$data
bins <- AHB_out$bins
data_dummy <- AHB_out$data_dummy
list_dummyCols <- AHB_out$list_dummyCols
treated_column_name <- AHB_out$verbose[[1]]
outcome_column_name <- AHB_out$verbose[[2]]
lowerBound <- bins[which(treated_unit_ids == treated_unit_id), ,1]
higherBound<-bins[which(treated_unit_ids == treated_unit_id), ,2]
unit_dummy <-  data_dummy[treated_unit_id,]
count <- 1
colNames <- colnames(data)
for(cov in colNames){
if(cov == treated_column_name ||cov == outcome_column_name) next
if(is.factor(data[, cov])){
info <- mapCategoricalBoundsToOriginal(lowerBound,higherBound,cov,list_dummyCols[[count]],unit_dummy)
infoList<- append(infoList,info)
count = count + 1
}
else{
lower = lowerBound[which(colnames(unit_dummy) == cov)]
higher = higherBound[which(colnames(unit_dummy) == cov)]
info <- printOneLineNumeric(cov,lower,higher);
infoList<- append(infoList,info)
}
}
}
l = list()
l["1"] <- "asdf"
l["12"]<- "asdf"
l
print_box<-function(AHB_out, treated_unit_id){
treated_unit_ids <-AHB_out$treated_unit_ids
if(!(treated_unit_id %in% treated_unit_ids)){
stop("Please input a valid treated unit id.\n")
}
infoList = list ()
cat(paste0("Unit ",treated_unit_id, " matches to units with: " ,"\n"))
data <- AHB_out$data
bins <- AHB_out$bins
data_dummy <- AHB_out$data_dummy
list_dummyCols <- AHB_out$list_dummyCols
treated_column_name <- AHB_out$verbose[[1]]
outcome_column_name <- AHB_out$verbose[[2]]
lowerBound <- bins[which(treated_unit_ids == treated_unit_id), ,1]
higherBound<-bins[which(treated_unit_ids == treated_unit_id), ,2]
unit_dummy <-  data_dummy[treated_unit_id,]
count <- 1
colNames <- colnames(data)
for(cov in colNames){
if(cov == treated_column_name ||cov == outcome_column_name) next
if(is.factor(data[, cov])){
info <- mapCategoricalBoundsToOriginal(lowerBound,higherBound,cov,list_dummyCols[[count]],unit_dummy)
infoList[cov] <-info
count = count + 1
}
else{
lower = lowerBound[which(colnames(unit_dummy) == cov)]
higher = higherBound[which(colnames(unit_dummy) == cov)]
info <- printOneLineNumeric(cov,lower,higher);
infoList[cov] <-info
}
}
}
mapCategoricalBoundsToOriginal<-function(lb,hb,colName,colsDummy,unit_dummy){
container <- c()
for(col in colsDummy){
index <- which(colnames(unit_dummy) == paste0(colName,"_",col))
if(unit_dummy[index] >= lb[index] && unit_dummy[index] <= hb[index]){
container<-append(container, col)
}
}
info <- printOneLineForFactor(colName, container)
return (info)
}
printOneLineForFactor <- function(colName, container){
info = paste(colName, "in {")
delimit = ""
i <- 1
for(c in container){
info = paste(info , c)
if(i != length(container)){
info = paste(info , ",")
}
i = i +1
}
info = paste(info , "}")
cat(paste(info, "\n"))
return (info)
}
printOneLineNumeric <- function(colName, lower,higher){
info = paste(colName, "from ")
info = paste(info, sprintf("%.3f", lower), "to", sprintf("%.3f", higher))
cat(paste(info, "\n"))
return(info)
}
print_box(AHB_out,6)
print_box<-function(AHB_out, treated_unit_id){
treated_unit_ids <-AHB_out$treated_unit_ids
if(!(treated_unit_id %in% treated_unit_ids)){
stop("Please input a valid treated unit id.\n")
}
infoList = list ()
cat(paste0("Unit ",treated_unit_id, " matches to units with: " ,"\n"))
data <- AHB_out$data
bins <- AHB_out$bins
data_dummy <- AHB_out$data_dummy
list_dummyCols <- AHB_out$list_dummyCols
treated_column_name <- AHB_out$verbose[[1]]
outcome_column_name <- AHB_out$verbose[[2]]
lowerBound <- bins[which(treated_unit_ids == treated_unit_id), ,1]
higherBound<-bins[which(treated_unit_ids == treated_unit_id), ,2]
unit_dummy <-  data_dummy[treated_unit_id,]
count <- 1
colNames <- colnames(data)
for(cov in colNames){
if(cov == treated_column_name ||cov == outcome_column_name) next
if(is.factor(data[, cov])){
info <- mapCategoricalBoundsToOriginal(lowerBound,higherBound,cov,list_dummyCols[[count]],unit_dummy)
infoList[cov] <-info
count = count + 1
}
else{
lower = lowerBound[which(colnames(unit_dummy) == cov)]
higher = higherBound[which(colnames(unit_dummy) == cov)]
info <- printOneLineNumeric(cov,lower,higher);
infoList[cov] <-info
}
}
return (infoList)
}
mapCategoricalBoundsToOriginal<-function(lb,hb,colName,colsDummy,unit_dummy){
container <- c()
for(col in colsDummy){
index <- which(colnames(unit_dummy) == paste0(colName,"_",col))
if(unit_dummy[index] >= lb[index] && unit_dummy[index] <= hb[index]){
container<-append(container, col)
}
}
info <- printOneLineForFactor(colName, container)
return (info)
}
printOneLineForFactor <- function(colName, container){
info = paste(colName, "in {")
delimit = ""
i <- 1
for(c in container){
info = paste(info , c)
if(i != length(container)){
info = paste(info , ",")
}
i = i +1
}
info = paste(info , "}")
cat(paste(info, "\n"))
return (info)
}
printOneLineNumeric <- function(colName, lower,higher){
info = paste(colName, "from ")
info = paste(info, sprintf("%.3f", lower), "to", sprintf("%.3f", higher))
cat(paste(info, "\n"))
return(info)
}
print_box(AHB_out,6)
info_printed <- print_box(AHB_out,6)
info_printed$`10`
info_printed$`3`
ls
devtools::document()
usethis::use_rcpp()
library(AHB)
gen_mixedData<-function(n_units=100, p = 4){
beta0 <- 2 # Baseline response
beta_tilde <- 5 # treatment effect
p_numeric <- p/2
p_categorical <- p - p_numeric
beta <- runif(p, -1, 1) # To go from X_numeric to propensity score
## For generating propensity scores and assigning treatment
X_numeric <- matrix(runif(p_numeric * n_units, -5, 5), nrow = n_units)
X_categorical <- matrix(rbinom(p_categorical * n_units, 1, 0.5), ncol = p_categorical, nrow = n_units)
X_categorical[,1]<-"male"
X_categorical[c(1,2,3,4,5,6,7,8),1] <-"female"
X_categorical[,2]<-"1"
X_categorical[c(1,2,3,4,5,6,7,8),2] <-"2"
X_categorical[c(9:15),2] <-"3"
## Generate outcome
eps <- rnorm(n_units, 0, 1)
Z <- rbinom(n_units, 1, 0.5)
X_numeric[, 1] <-  matrix(runif(n_units, 1000, 10000), nrow = n_units)
X_numeric[, 2] <- matrix(runif(n_units, 0, 1000), nrow = n_units)
Y1 <- beta0 + (X_numeric[, 1] > 1.5) * beta_tilde + eps
Y0 <- beta0  + eps
Y = Y1 * Z + Y0 * (1-Z)
df <- cbind(data.frame(X_numeric),data.frame(X_categorical))
colnames(df)<-NULL
df <- cbind(df,data.frame(outcome = Y, treated = Z))
if (p==4){
colnames(df)<- c("salary", "payment on books", "gender", "the number of children",
"outcome", "treated")
}
return(data = df)
}
df <- gen_mixedData()
AHB_out <- AHB_fast_match(df,df)
printedInfo <- print_box(AHB_out, 1)
printedInfo$salary
printedInfo$`payment on books`
printedInfo$gender
print_box(AHB_out, 1)
print_box<-function(AHB_out, treated_unit_id, returnValue = F ){
treated_unit_ids <-AHB_out$treated_unit_ids
if(!(treated_unit_id %in% treated_unit_ids)){
stop("Please input a valid treated unit id.\n")
}
infoList = list ()
cat(paste0("Unit ",treated_unit_id, " matches to units with: " ,"\n"))
data <- AHB_out$data
bins <- AHB_out$bins
data_dummy <- AHB_out$data_dummy
list_dummyCols <- AHB_out$list_dummyCols
treated_column_name <- AHB_out$verbose[[1]]
outcome_column_name <- AHB_out$verbose[[2]]
lowerBound <- bins[which(treated_unit_ids == treated_unit_id), ,1]
higherBound<-bins[which(treated_unit_ids == treated_unit_id), ,2]
unit_dummy <-  data_dummy[treated_unit_id,]
count <- 1
colNames <- colnames(data)
for(cov in colNames){
if(cov == treated_column_name ||cov == outcome_column_name) next
if(is.factor(data[, cov])){
info <- mapCategoricalBoundsToOriginal(lowerBound,higherBound,cov,list_dummyCols[[count]],unit_dummy)
infoList[cov] <-info
count = count + 1
}
else{
lower = lowerBound[which(colnames(unit_dummy) == cov)]
higher = higherBound[which(colnames(unit_dummy) == cov)]
info <- printOneLineNumeric(cov,lower,higher);
infoList[cov] <-info
}
}
if(returnValue){
return (infoList)
}
}
print_box(AHB_out, treated_unit_id = 1)
mapCategoricalBoundsToOriginal<-function(lb,hb,colName,colsDummy,unit_dummy){
container <- c()
for(col in colsDummy){
index <- which(colnames(unit_dummy) == paste0(colName,"_",col))
if(unit_dummy[index] >= lb[index] && unit_dummy[index] <= hb[index]){
container<-append(container, col)
}
}
info <- printOneLineForFactor(colName, container)
return (info)
}
printOneLineForFactor <- function(colName, container){
info = paste(colName, "in {")
delimit = ""
i <- 1
for(c in container){
info = paste(info , c)
if(i != length(container)){
info = paste(info , ",")
}
i = i +1
}
info = paste(info , "}")
cat(paste(info, "\n"))
return (info)
}
printOneLineNumeric <- function(colName, lower,higher){
info = paste(colName, "from ")
info = paste(info, sprintf("%.3f", lower), "to", sprintf("%.3f", higher))
cat(paste(info, "\n"))
return(info)
}
print_box(AHB_out, treated_unit_id = 1)
Unit1Info <- print_box(AHB_out, treated_unit_id = 1, returnValue = T)
Unit1Info$salary
Unit1Info$gender
print_box<-function(AHB_out, treated_unit_id, returnValue = F ){
treated_unit_ids <-AHB_out$treated_unit_ids
if(!(treated_unit_id %in% treated_unit_ids)){
stop("Please input a valid treated unit id.\n")
}
infoList = list ()
cat(paste0("Unit ",treated_unit_id, " matches to units with: " ,"\n"))
data <- AHB_out$data
bins <- AHB_out$bins
data_dummy <- AHB_out$data_dummy
list_dummyCols <- AHB_out$list_dummyCols
treated_column_name <- AHB_out$verbose[[1]]
outcome_column_name <- AHB_out$verbose[[2]]
lowerBound <- bins[which(treated_unit_ids == treated_unit_id), ,1]
higherBound<-bins[which(treated_unit_ids == treated_unit_id), ,2]
unit_dummy <-  data_dummy[treated_unit_id,]
count <- 1
colNames <- colnames(data)
for(cov in colNames){
if(cov == treated_column_name ||cov == outcome_column_name) next
if(is.factor(data[, cov])){
info <- mapCategoricalBoundsToOriginal(lowerBound,higherBound,cov,list_dummyCols[[count]],unit_dummy)
infoList[cov] <-info
count = count + 1
}
else{
lower = lowerBound[which(colnames(unit_dummy) == cov)]
higher = higherBound[which(colnames(unit_dummy) == cov)]
info <- printOneLineNumeric(cov,lower,higher);
infoList[cov] <-info
}
}
if(returnValue){
return (infoList)
}
}
mapCategoricalBoundsToOriginal<-function(lb,hb,colName,colsDummy,unit_dummy){
container <- c()
for(col in colsDummy){
index <- which(colnames(unit_dummy) == paste0(colName,"_",col))
if(unit_dummy[index] >= lb[index] && unit_dummy[index] <= hb[index]){
container<-append(container, col)
}
}
info <- printOneLineForFactor(colName, container)
return (info)
}
printOneLineForFactor <- function(colName, container){
info = paste(colName, "in {")
delimit = ""
i <- 1
for(c in container){
info = paste(info , c)
if(i != length(container)){
info = paste(info , ",")
}
i = i +1
}
info = paste(info , "}")
cat(paste("  ",info, "\n"))
return (info)
}
printOneLineNumeric <- function(colName, lower,higher){
info = paste(colName, "from ")
info = paste(info, sprintf("%.3f", lower), "to", sprintf("%.3f", higher))
cat(paste("  ", info, "\n"))
return(info)
}
print_box(AHB_out, treated_unit_id = 1)
Unit1Info <- print_box(AHB_out, treated_unit_id = 1, returnValue = T)
Unit1Info$salary
Unit1Info$gender
Unit1BoxInfo <- print_box(AHB_out, treated_unit_id = 1, returnValue = T)
Unit1BoxInfo$gender
Unit1BoxInfo$salary
devtools::document()
usethis::use_rcpp()
library(AHB)
library(AHB)
library(AHB)
devtools::document()
usethis::use_rcpp()
