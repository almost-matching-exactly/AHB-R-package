rownames(holdout)<-NULL
glimpse(newdataset)
library(FLAME)
FLAME(dataset1a)
FLAME(dataset1a,treated_column_name = "treated", outcome_column_name = "outcome")
FLAME(newdataset,treated_column_name = "treated", outcome_column_name = "outcome")
View(newdataset)
library(FLAME)
FLAME(newdataset,treated_column_name = "treated", outcome_column_name = "outcome")
library("AHB")
library("dummies")
dataset1a <- read.csv(file = 'dataset1a.csv')
newdataset <- dataset1a
# Remove Nan and Unsure values
newdataset  <- newdataset[complete.cases(newdataset ), ]
newdataset<-newdataset[- grep("Unsure", newdataset$symptoms),]
newdataset<-newdataset[- grep("Unsure", newdataset$childrenf2f),]
# outcome conversion
newdataset$outcome = as.numeric(as.factor(newdataset$outcome))
#convert the covariate with two values into binary numeric values
list_name = c("HHwork","childrenf2f","socialdistance","symptoms","college","latino","gender")
for(col_name in list_name){
newdataset[,which(colnames(newdataset)==col_name)] = as.numeric(as.factor(newdataset[,which(colnames(newdataset)==col_name)]))-1
}
#convert the covariate with more than 2 values into dummy binary variables
#replace the orignal column with new set of varibales
dummy_variables <- dummy(newdataset$race, sep = ".")
colnames(dummy_variables) <- c("anotherRace","Aisan","Black","White")
newdataset = cbind(newdataset,dummy_variables)
newdataset <- newdataset[,which(colnames(newdataset)!="race")]
#dataset1a_clean<-gen_data()
data = newdataset
holdout = 0.5
holdout_inds <- sample(1:nrow(data), size = round(holdout * nrow(data)))
holdout <- data[holdout_inds, ]
data <- data[-holdout_inds, ]
rownames(data)<-NULL
rownames(holdout)<-NULL
setwd("~/Desktop/AME lab/dataset/")
library("AHB")
library("dummies")
dataset1a <- read.csv(file = 'dataset1a.csv')
newdataset <- dataset1a
# Remove Nan and Unsure values
newdataset  <- newdataset[complete.cases(newdataset ), ]
newdataset<-newdataset[- grep("Unsure", newdataset$symptoms),]
newdataset<-newdataset[- grep("Unsure", newdataset$childrenf2f),]
# outcome conversion
newdataset$outcome = as.numeric(as.factor(newdataset$outcome))
#convert the covariate with two values into binary numeric values
list_name = c("HHwork","childrenf2f","socialdistance","symptoms","college","latino","gender")
for(col_name in list_name){
newdataset[,which(colnames(newdataset)==col_name)] = as.numeric(as.factor(newdataset[,which(colnames(newdataset)==col_name)]))-1
}
#convert the covariate with more than 2 values into dummy binary variables
#replace the orignal column with new set of varibales
dummy_variables <- dummy(newdataset$race, sep = ".")
colnames(dummy_variables) <- c("anotherRace","Aisan","Black","White")
newdataset = cbind(newdataset,dummy_variables)
newdataset <- newdataset[,which(colnames(newdataset)!="race")]
#dataset1a_clean<-gen_data()
data = newdataset
holdout = 0.5
holdout_inds <- sample(1:nrow(data), size = round(holdout * nrow(data)))
holdout <- data[holdout_inds, ]
data <- data[-holdout_inds, ]
rownames(data)<-NULL
rownames(holdout)<-NULL
View(newdataset)
fast_out  = AHB_fast_match(data = newdataset, holdout = holdout)
rownames(data)<-NULL
rownames(holdout)<-NULL
fast_out  = AHB_fast_match(data = data, holdout = holdout)
View(fast_out)
fast_out[["CATE"]]
fast_out$MGs
mip_out  = AHB_MIP_match(data = data, holdout = holdout)
mip_out$CATE
fast_out$CATE
mip_out$MGs
mip_out$units_id
fast_out$units_id
fast_out[["MGs"]][[1]]
mip_out[["MGs"]][[1]]
fast_out[["MGs"]][[1]]
fast_out[["MGs"]][[2]]
mip_out[["MGs"]][[2]]
#After adding error
data <-gen_data(n_units = 50)
holdout <- gen_data(n_units = 50)
fast_out  = AHB_fast_match(data = data, holdout = holdout)
fast_out $MGs
mip_out$MGs
mip_out  = AHB_MIP_match(data = data, holdout = holdout)
mip_out$MGs
for( i in 1:5){
print(mip_out$MGs[[i]])
print(fast_out$MGs[[i]])
}
fast_out  = AHB_fast_match(data = data, holdout = holdout, C = 3)
for( i in 1:5){
print(mip_out$MGs[[i]])
print(fast_out$MGs[[i]])
}
fast_out  = AHB_fast_match(data = data, holdout = holdout, C = 3000)
for( i in 1:5){
print(mip_out$MGs[[i]])
print(fast_out$MGs[[i]])
}
fast_out  = AHB_fast_match(data = data, holdout = holdout, C = 300)
for( i in 1:5){
print(mip_out$MGs[[i]])
print(fast_out$MGs[[i]])
}
#After adding error
data <-gen_data(n_units = 50)
holdout <- gen_data(n_units = 50)
fast_out  = AHB_fast_match(data = data, holdout = holdout, C = 1)
mip_out  = AHB_MIP_match(data = data, holdout = holdout)
for( i in 1:5){
print(mip_out$MGs[[i]])
print(fast_out$MGs[[i]])
}
for( i in 1:length(mip_out$units_id )){
print(mip_out$MGs[[i]])
print(fast_out$MGs[[i]])
}
for( i in 1:length(mip_out$units_id )){
print(paste0("mip: ",mip_out$MGs[[i]]))
print(paste0("fast: ",fast_out$MGs[[i]]))
}
for( i in 1:length(mip_out$units_id )){
print("mip")
print(mip_out$MGs[[i]])
print("fast")
print(fast_out$MGs[[i]])
}
devtools::document()
usethis::use_rcpp()
library(AHB)
data = matrix(rbinom(100*1, 1,.6), ncol=1) #treated
data <- cbind(data,sample(1:50, 100, replace = TRUE))   #outcome
data <- cbind(data, rbinom(100*1, 1,.5))  #binary
data <- cbind(data, rbinom(100*1, 1,.5))  #binary
data <- cbind(data,sample(1:50, 100, replace = TRUE)) #integer
data <- cbind(data,sample(50:70, 100, replace = TRUE)) #integer
data <- cbind(data, matrix(runif(200, -5, 5), ncol=2))#continuous
data <- as.data.frame(data)
mip_out <- AHB_fast_match(data = data,holdout = 0.5,treated_column_name = "V1",outcome_column_name = "V2")
ATT(mip_out)
library(AHB)
data = matrix(rbinom(100*1, 1,.6), ncol=1) #treated
data <- cbind(data,sample(1:50, 100, replace = TRUE))   #outcome
data <- cbind(data, rbinom(100*1, 1,.5))  #binary
data <- cbind(data, rbinom(100*1, 1,.5))  #binary
data <- cbind(data,sample(1:50, 100, replace = TRUE)) #integer
data <- cbind(data,sample(50:70, 100, replace = TRUE)) #integer
data <- cbind(data, matrix(runif(200, -5, 5), ncol=2))#continuous
data <- as.data.frame(data)
mip_out <- AHB_fast_match(data = data,holdout = 0.5,treated_column_name = "V1",outcome_column_name = "V2")
mip_out$verbose
ATT(mip_out)
AHB_out<-mip_out
ind_treated <- which(colnames(AHB_out$data) == AHB_out$verbose[1])
ind_outcome <- which(colnames(AHB_out$data) == AHB_out$verbose[2])
ind_treated
ind_outcome
controls <-  which(AHB_out$data[, ind_treated] == 0)
treated <- which(AHB_out$data[, ind_treated] == 1)
controls
AHB::ATT(mip_out)
devtools::document()
usethis::use_rcpp()
library(AHB)
rm(list = ls())
library(AHB)
list_mip = c()
list_fast1 = c()
list_fast0 = c()
list_ATT_mip = c()
list_ATT_fast1 = c()
list_ATT_fast0 = c()
test_data = NULL
test_holdout = NULL
times = 10
for( i in 1:times){
data <- gen_data(n_units = 100)
holdout <- gen_data(n_units = 100)
treated_column_name = 'treated'
outcome_column_name = 'outcome'
# treated_column_name = 'V1'
# outcome_column_name = 'V2'
mip_out <- AHB_MIP_match(data = data, holdout = holdout,
treated_column_name = treated_column_name, outcome_column_name = outcome_column_name)
fast_out_0 <- AHB_fast_match(data = data, holdout = holdout,
treated_column_name = treated_column_name, outcome_column_name = outcome_column_name) # have error as boundary
# fast_out_1 <- AHB_fast_match_1(data = data, holdout = holdout,
treated_column_name = treated_column_name, outcome_column_name = outcome_column_name)
test_data  = data
test_holdout = holdout
list_mip[i] = AHB::ATE(mip_out)
list_fast0[i] = AHB::ATE(fast_out_0)
# list_fast1[i] = AHB::ATE(fast_out_1)
list_ATT_mip[i] = abs(AHB::ATT(mip_out))
list_ATT_fast0[i] = abs(AHB::ATT(fast_out_0))
# list_ATT_fast1[i] = abs(AHB::ATT(fast_out_1))
# ITE_mip = Estimated_ITE(mip_out)
# ITE_fast0 = Estimated_ITE(fast_out_0)
# ITE_fast1 = Estimated_ITE(fast_out_1)
# err_mip = mean(abs(ITE_mip - HTE[mip_out$units_id]))
# err_fast0 = mean(abs(ITE_fast0 - HTE[mip_out$units_id]))
# err_fast1 = mean(abs(ITE_fast1 - HTE[mip_out$units_id]))
# list_ATT_mip[i] = err_mip
# list_ATT_fast0[i] = err_fast0
# list_ATT_fast1[i] = err_fast1
}
list_mip = c()
list_fast1 = c()
list_fast0 = c()
list_ATT_mip = c()
list_ATT_fast1 = c()
list_ATT_fast0 = c()
test_data = NULL
test_holdout = NULL
times = 10
for( i in 1:times){
data <- gen_data(n_units = 100)
holdout <- gen_data(n_units = 100)
treated_column_name = 'treated'
outcome_column_name = 'outcome'
# treated_column_name = 'V1'
# outcome_column_name = 'V2'
mip_out <- AHB_MIP_match(data = data, holdout = holdout,
treated_column_name = treated_column_name, outcome_column_name = outcome_column_name)
fast_out_0 <- AHB_fast_match(data = data, holdout = holdout,
treated_column_name = treated_column_name, outcome_column_name = outcome_column_name) # have error as boundary
# fast_out_1 <- AHB_fast_match_1(data = data, holdout = holdout,
treated_column_name = treated_column_name, outcome_column_name = outcome_column_name)
test_data  = data
test_holdout = holdout
list_mip[i] = AHB::ATE(mip_out)
list_fast0[i] = AHB::ATE(fast_out_0)
# list_fast1[i] = AHB::ATE(fast_out_1)
list_ATT_mip[i] = abs(AHB::ATT(mip_out))
list_ATT_fast0[i] = abs(AHB::ATT(fast_out_0))
# list_ATT_fast1[i] = abs(AHB::ATT(fast_out_1))
# ITE_mip = Estimated_ITE(mip_out)
# ITE_fast0 = Estimated_ITE(fast_out_0)
# ITE_fast1 = Estimated_ITE(fast_out_1)
# err_mip = mean(abs(ITE_mip - HTE[mip_out$units_id]))
# err_fast0 = mean(abs(ITE_fast0 - HTE[mip_out$units_id]))
# err_fast1 = mean(abs(ITE_fast1 - HTE[mip_out$units_id]))
# list_ATT_mip[i] = err_mip
# list_ATT_fast0[i] = err_fast0
# list_ATT_fast1[i] = err_fast1
}
list_mip = c()
list_fast1 = c()
list_fast0 = c()
list_ATT_mip = c()
list_ATT_fast1 = c()
list_ATT_fast0 = c()
test_data = NULL
test_holdout = NULL
times = 10
for( i in 1:times){
data <- gen_data(n_units = 100)
holdout <- gen_data(n_units = 100)
treated_column_name = 'treated'
outcome_column_name = 'outcome'
# treated_column_name = 'V1'
# outcome_column_name = 'V2'
mip_out <- AHB_MIP_match(data = data, holdout = holdout,
treated_column_name = treated_column_name, outcome_column_name = outcome_column_name)
fast_out_0 <- AHB_fast_match(data = data, holdout = holdout,
treated_column_name = treated_column_name, outcome_column_name = outcome_column_name) # have error as boundary
# fast_out_1 <- AHB_fast_match_1(data = data, holdout = holdout,
treated_column_name = treated_column_name, outcome_column_name = outcome_column_name)
test_data  = data
test_holdout = holdout
list_mip[i] = AHB::ATE(mip_out)
list_fast0[i] = AHB::ATE(fast_out_0)
# list_fast1[i] = AHB::ATE(fast_out_1)
list_ATT_mip[i] = abs(AHB::ATT(mip_out))
list_ATT_fast0[i] = abs(AHB::ATT(fast_out_0))
}
iterations <- 1:times
plot(iterations, list_ATT_mip,
main="Comparison ATT between fast and mip on continous dataset",
ylab="Estimated ATT",
type="l",
,ylim = c(0,10),
col="black")
lines(iterations,list_ATT_fast0, type = 'l',col = 'blue',lwd = 2)
lines(iterations,list_ATT_fast0, type = 'l',col = 'red', lwd = 2)
legend("bottomleft",
c("mip","fast_new","fast_old"),
fill=c("black","blue","red"),
cex = 0.75
)
list_mip = c()
list_fast1 = c()
list_fast0 = c()
list_ATT_mip = c()
list_ATT_fast1 = c()
list_ATT_fast0 = c()
test_data = NULL
test_holdout = NULL
times = 10
for( i in 1:times){
data <- gen_data(n_units = 100)
holdout <- gen_data(n_units = 100)
treated_column_name = 'treated'
outcome_column_name = 'outcome'
# treated_column_name = 'V1'
# outcome_column_name = 'V2'
mip_out <- AHB_MIP_match(data = data, holdout = holdout,
treated_column_name = treated_column_name, outcome_column_name = outcome_column_name)
fast_out_0 <- AHB_fast_match(data = data, holdout = holdout,
treated_column_name = treated_column_name, outcome_column_name = outcome_column_name) # have error as boundary
# fast_out_1 <- AHB_fast_match_1(data = data, holdout = holdout,
# treated_column_name = treated_column_name, outcome_column_name = outcome_column_name)
test_data  = data
test_holdout = holdout
list_mip[i] = AHB::ATE(mip_out)
list_fast0[i] = AHB::ATE(fast_out_0)
# list_fast1[i] = AHB::ATE(fast_out_1)
list_ATT_mip[i] = abs(AHB::ATT(mip_out))
list_ATT_fast0[i] = abs(AHB::ATT(fast_out_0))
}
iterations <- 1:times
plot(iterations, list_ATT_mip,
main="Comparison ATT between fast and mip on continous dataset",
ylab="Estimated ATT",
type="l",
,ylim = c(0,10),
col="black")
lines(iterations,list_ATT_fast0, type = 'l',col = 'blue',lwd = 2)
lines(iterations,list_ATT_fast0, type = 'l',col = 'red', lwd = 2)
legend("bottomleft",
c("mip","fast_new","fast_old"),
fill=c("black","blue","red"),
cex = 0.75
)
iterations <- 1:times
plot(iterations, list_ATT_mip,
main="Comparison ATT between fast and mip on continous dataset",
ylab="Estimated ATT",
type="l",
,ylim = c(0,3),
col="black")
lines(iterations,list_ATT_fast0, type = 'l',col = 'blue',lwd = 2)
lines(iterations,list_ATT_fast0, type = 'l',col = 'red', lwd = 2)
legend("bottomleft",
c("mip","fast_new","fast_old"),
fill=c("black","blue","red"),
cex = 0.75
)
iterations <- 1:times
plot(iterations, list_ATT_mip,
main="Comparison ATT between fast and mip on continous dataset",
ylab="Estimated ATT",
type="l",
,ylim = c(0,5),
col="black")
lines(iterations,list_ATT_fast0, type = 'l',col = 'blue',lwd = 2)
lines(iterations,list_ATT_fast0, type = 'l',col = 'red', lwd = 2)
legend("bottomleft",
c("mip","fast_new","fast_old"),
fill=c("black","blue","red"),
cex = 0.75
)
iterations <- 1:times
plot(iterations, list_ATT_mip,
main="Comparison ATT between fast and mip on continous dataset",
ylab="Estimated ATT",
type="l",
,ylim = c(0,6),
col="black")
lines(iterations,list_ATT_fast0, type = 'l',col = 'blue',lwd = 2)
lines(iterations,list_ATT_fast0, type = 'l',col = 'red', lwd = 2)
legend("bottomleft",
c("mip","fast_new","fast_old"),
fill=c("black","blue","red"),
cex = 0.75
)
list_mip = c()
list_fast1 = c()
list_fast0 = c()
list_ATT_mip = c()
list_ATT_fast1 = c()
list_ATT_fast0 = c()
test_data = NULL
test_holdout = NULL
times = 10
for( i in 1:times){
data <- gen_data(n_units = 100)
holdout <- gen_data(n_units = 100)
treated_column_name = 'treated'
outcome_column_name = 'outcome'
# treated_column_name = 'V1'
# outcome_column_name = 'V2'
mip_out <- AHB_MIP_match(data = data, holdout = holdout,
treated_column_name = treated_column_name, outcome_column_name = outcome_column_name)
fast_out_0 <- AHB_fast_match(data = data, holdout = holdout,
treated_column_name = treated_column_name, outcome_column_name = outcome_column_name) # have error as boundary
# fast_out_1 <- AHB_fast_match_1(data = data, holdout = holdout,
# treated_column_name = treated_column_name, outcome_column_name = outcome_column_name)
test_data  = data
test_holdout = holdout
list_mip[i] = AHB::ATE(mip_out)
list_fast0[i] = AHB::ATE(fast_out_0)
# list_fast1[i] = AHB::ATE(fast_out_1)
list_ATT_mip[i] = abs(AHB::ATT(mip_out))
list_ATT_fast0[i] = abs(AHB::ATT(fast_out_0))
}
library(FLAME)
gen_data(n=1000000,p=30)
n = 250, p = 5,
n = 250
p = 5
write = FALSE
TE <- 5
covs <- matrix(rbinom(n * p, 1, prob = 0.5), nrow = n)
View(covs)
covs <-
sample(1:4, size = n * p, replace = TRUE, prob = c(0.2, 0.3, 0.4, 0.1))
covs <- matrix(covs, nrow = n)
treated <- rbinom(n, 1, prob = 0.5)
outcome <-
15 * covs[, 1] - 10 * covs[, 2] + 5 * covs[, 3] +
TE * treated +
rnorm(n)
data <- data.frame(covs, outcome = outcome, treated = treated)
View(data)
df<-gen_data(n=1000000,p=30)
View(df)
n = 50000
p = 5
write = FALSE
path = getwd()
filename = 'FLAME.csv'
if (p <= 2) {
stop('`p` must be greater than 2')
}
TE <- 5
covs <- matrix(rbinom(n * p, 1, prob = 0.5), nrow = n)
covs <-
sample(1:4, size = n * p, replace = TRUE, prob = c(0.2, 0.3, 0.4, 0.1))
covs <- matrix(covs, nrow = n)
treated <- rbinom(n, 1, prob = 0.5)
outcome <-
15 * covs[, 1] - 10 * covs[, 2] + 5 * covs[, 3] +
TE * treated +
rnorm(n)
data <- data.frame(covs, outcome = outcome, treated = treated)
View(data)
gen_data1 <- function(n = 250, p = 5,
write = FALSE, path = getwd(), filename = 'FLAME.csv') {
if (p <= 2) {
stop('`p` must be greater than 2')
}
TE <- 5
covs <- matrix(rbinom(n * p, 1, prob = 0.5), nrow = n)
covs <-
sample(1:4, size = n * p, replace = TRUE, prob = c(0.2, 0.3, 0.4, 0.1))
covs <- matrix(covs, nrow = n)
treated <- rbinom(n, 1, prob = 0.5)
outcome <-
15 * covs[, 1] - 10 * covs[, 2] + 5 * covs[, 3] +
TE * treated +
rnorm(n)
data <- data.frame(covs, outcome = outcome, treated = treated)
# data[, 1:ncol(covs)] <-  lapply(data[, 1:ncol(covs)], as.factor)
if (write) {
write.csv(data, file = paste0(path, '/', filename),
row.names = FALSE)
}
return(data)
}
df1<-gen_data(n=1000000,p=30)
View(df1)
df1<-gen_data1(n=1000000,p=30)
View(df1)
covs <-
sample(0:2, size = n * p, replace = TRUE, prob = c(0.2, 0.3, 0.4, 0.1))
covs <- matrix(covs, nrow = n)
data = read_csv('/Users/alex/Desktop/FLAME-Python2-master/test_db_data.csv')
library(tidyverse)
data = tidyverse::read_csv('/Users/alex/Desktop/FLAME-Python2-master/test_db_data.csv')
data = read_csv('/Users/alex/Desktop/FLAME-Python2-master/test_db_data.csv')
data = read_csv('/Users/alex/Desktop/FLAME-Python2-master/test_bd_data.csv')
View(data)
library(tidyverse)
data = read_csv('/Users/alex/Desktop/FLAME-Python2-master/test_bd_data.csv',header = FALSE)
library(tidyverse)
data = read.csv('/Users/alex/Desktop/FLAME-Python2-master/test_bd_data.csv',header = FALSE)
View(data)
data = read.csv('/Users/alex/Desktop/FLAME-Python2-master/test_bd_data.csv',header = TRUE)
View(data)
View(df)
data = read.csv('/Users/alex/Desktop/FLAME-Python2-master/test_bd_data.csv',header = TRUE)
View(data)
library(FLAME)
res = FLAME(data = data, holdout = data)
library(FLAME)
data = read.csv('/Users/alex/Desktop/FLAME-Python2-master/test_bd_data.csv',header = TRUE)
res = FLAME(data = data, holdout = data)
res
View(data)
ATE(data)
ATE(res)
